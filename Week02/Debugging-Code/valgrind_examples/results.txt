==35348== Memcheck, a memory error detector
==35348== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==35348== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==35348== Command: a.out
==35348== 
==35348== Use of uninitialised value of size 8
==35348==    at 0x4E90122: _IO_vfscanf (in /usr/lib64/libc-2.17.so)
==35348==    by 0x4E9DE8A: scanf (in /usr/lib64/libc-2.17.so)
==35348==    by 0x400710: process (gp2.c:24)
==35348==    by 0x40079B: main (gp2.c:36)
==35348==  Uninitialised value was created by a stack allocation
==35348==    at 0x4006D0: process (gp2.c:20)
==35348== 
==35348== Invalid write of size 4
==35348==    at 0x4E90122: _IO_vfscanf (in /usr/lib64/libc-2.17.so)
==35348==    by 0x4E9DE8A: scanf (in /usr/lib64/libc-2.17.so)
==35348==    by 0x400710: process (gp2.c:24)
==35348==    by 0x40079B: main (gp2.c:36)
==35348==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==35348== 
==35348== 
==35348== Process terminating with default action of signal 11 (SIGSEGV)
==35348==  Access not within mapped region at address 0x0
==35348==    at 0x4E90122: _IO_vfscanf (in /usr/lib64/libc-2.17.so)
==35348==    by 0x4E9DE8A: scanf (in /usr/lib64/libc-2.17.so)
==35348==    by 0x400710: process (gp2.c:24)
==35348==    by 0x40079B: main (gp2.c:36)
==35348==  If you believe this happened as a result of a stack
==35348==  overflow in your program's main thread (unlikely but
==35348==  possible), you can try to increase the size of the
==35348==  main thread stack using the --main-stacksize= flag.
==35348==  The main thread stack size used in this run was 8388608.
Enter lower limit: ==35348== 
==35348== HEAP SUMMARY:
==35348==     in use at exit: 0 bytes in 0 blocks
==35348==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==35348== 
==35348== All heap blocks were freed -- no leaks are possible
==35348== 
==35348== For counts of detected and suppressed errors, rerun with: -v
==35348== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
